#!/bin/bash
# Based off the original nvscmd script by Axel Kohlmeyer
# Rewritten and improved by Lilly A
# Reminder, best curve function is: y=\max\left(30,\min\left(100,\operatorname{ceil}\left(-0.00019x^{3}+0.018x^{2}+1.4284x+-31.6105\right)\right)\right)

function fan_curve {
    local temp=$1

    if [ $temp -le 30 ]; then # If we're below 30C, set to 30%
        fanspeed=30
    elif [ $temp -lt 100 ] && [ $temp -ge 30 ]; then
        # Use cubic polynomial to calculate fan speed, thanks for jank awk from https://blog.mdminhazulhaque.io/round-number-in-bash-script
        fanspeed=$(echo "-0.00019*$temp^3+0.018*$temp^2+1.4284*$temp+-31.6105" | bc -l | awk '{print ($0-int($0)>0)?int($0)+1:int($0)}')
    else # If we're above 100C, set to 100%
        fanspeed=100
    fi

    # Final sanity check
    if [ $fanspeed -gt 100 ]; then
        fanspeed=100
    elif [ $fanspeed -lt 30 ]; then
        fanspeed=30
    fi

    # Roof round
    echo $fanspeed
}


echo "Setting run_forever to 1"
run_forever=1


GPU_ID=$1 # GPU ID is the first argument, this is to set the gpu's fans we want to control
shift

if [ "x$1" == "xstop" ]; then
    echo "Setting target to -1"
    target=-1
fi

if [[ "x$1" == "x" || "x$1" == "xstart" || "x$1" == "x-display" ]]; then
    # this means "use heuristic"
    echo "Using heuristic for fan speed, \$1 is '$1'"
    target=-3
else
    echo "Setting target to $1"
    target=$1
fi

if [[ "x$1" != "x" && "x$1" != "x-display" ]]; then
    echo "Shifting arguments"
    shift
fi

# -10 aka null
last_target=-10
last_friendly_target=-0


while true; do
    # Why does target get set to an improper value in my rewrite?

    if [ $target -eq -3 ]; then
        # execute heuristic
        #temp=$(nvidia-smi dmon -s p -c 1 | grep -v '#' | tr -d '-' | sed 's/     /,/gm' | tr -d ' ' | sed 's/^[0-9]*,//g' | sed 's/,[0-9]*,//g' | awk '{sum+=$1; count++} END {printf "%.0f\n", sum/count}')         # this averages the GPU temps of all GPUs
        temp=$(nvidia-smi --query-gpu temperature.gpu -i $GPU_ID --format=noheader,csv) # this gets the temperature of the specified GPU
        target=-2 #default value

        target=$(fan_curve $temp)

        if [[ $target -eq -2 || $target -eq $last_target || $target -eq $last_friendly_target ]]; then
            echo "Current average temperature is ${temp}c. No adjustments needed."
        else
            if [ $target -ge 0 ]; then
                echo "Current average temperature is ${temp}c. Setting fan speed to ${target}%"
            else
                echo "Current average temperature is ${temp}c. Setting fan speed to AUTO"
            fi
        fix
    fi

    if [[ $last_target -ne $target && $last_friendly_target -ne $target ]]; then

        # relinquish fan speed control back to the system
        if [ "x${target}" == "x-1" ]; then
            /usr/bin/nvidia-settings -a "[gpu:${GPU_ID}]/GPUFanControlState=0" "$@" >& /dev/null
        fi

        # set fan speed on GPU(s) to target
        if [ $target -ge 0 ]; then
            # enable manual fan control
            /usr/bin/nvidia-settings -a "[gpu:${GPU_ID}]/GPUFanControlState=1" "$@" >& /dev/null

            echo "Setting fan ${GPU_ID} to ${target}%"
            /usr/bin/nvidia-settings -a "[fan:${GPU_ID}]/GPUTargetFanSpeed=${target}" "$@" >& /dev/null
        fi
    fi

    last_target=$target
    target=-3

    if [ $last_target -ge 0 ]; then
        last_friendly_target=$last_target
    fi
    if [ $last_target -eq -1 ]; then
        last_friendly_target=-0
        echo "Previous target was AUTO"
    fi
    # -2 means preserve
    if [ $last_target -lt -2 ]; then
        last_friendly_target=-0
        echo "Previous target was UNKNOWN"
    fi
    
    sleep 15

    if [ $run_forever -ne 1 ]; then
        break
    fi
done